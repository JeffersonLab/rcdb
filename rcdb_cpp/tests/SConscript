##
# Tests SConstcipt files
#
##
Import('default_env', 'rcdb_sqlite_cpp_lib')
env = default_env.Clone()

#Configure environment to create tests
test_sources = [
    "catch.cpp",
    "test_ConditionType.cpp",
    "test_MySqlProvider.cpp",
    "test_SqLiteProvider.cpp",
]

if not WhereIs("mysql_config"):
    print
    print 	"ERROR. Can't find 'mysql_config' utility which is needed to build RCDB with MySQL support."
    print 	"Two options is possible to build RCDB:"
    print   "   1. Install mysql_config (RHEL has it in mysql-devel package, Ubuntu in libmysqlclient-dev)"
    print   "   2. Build CCDB without MySQL dependencies (add 'with-mysql=false' to scons command)"
    print
    Exit()

#mysql_sources = [
    #user api
#    "MySQLCalibration.cc",

    #model and provider
#    "Providers/MySQLConnectionInfo.cc",
#    "Providers/MySQLDataProvider.cc"]

#lib_sources.extend(mysql_sources)
env.Append(CPPDEFINES='RCDB_MYSQL')
env.ParseConfig('mysql_config --libs --cflags')

#Making tests
rcdb_tests_program = env.Program('rcdb_test_cpp', source = test_sources, LIBS=[rcdb_sqlite_cpp_lib, 'sqlite3', 'mysqlclient'], LIBPATH='#lib')
rcdb_tests_install = env.Install('#bin', rcdb_tests_program)