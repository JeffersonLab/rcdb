##
# RCDB library SConstcipt files
#
##
Import('default_env')
env = default_env.Clone()

env.Append(CPPFLAGS = '-fPIC')
env.Append(CPPDEFINES=['RCDB_SQLITE'])
env.Append(LIBS=['pthread', 'dl', 'm'])

sources = [
    "SQLite/sqlite3.c",
    "SQLiteCpp/Column.cpp",
    "SQLiteCpp/Database.cpp",
    "SQLiteCpp/Statement.cpp",
    "SQLiteCpp/Transaction.cpp"
]


#Build with mysql or no?
#Read user flag for using mysql dependencies or not
if ARGUMENTS.get("with-mysql","true")=="true":
    #User wants mysql!
    print
    print "Building RCDB using MySQL dependencies"
    print "To build RCDB without mysql dependencies. Run scons with 'with-mysql=false'"
    print

    if not WhereIs("mysql_config"):
        print
        print 	"ERROR. Can't find 'mysql_config' utility which is needed to build CCDB with MySQL support."
        print 	"Two options is possible to build RCDB:"
        print   "  1. Install mysql_config (RHEL has it in mysql-devel package, Ubuntu in libmysqlclient-dev)"
        print   "  2. Build CCDB without MySQL dependencies (use 'mysql=no' scons flag)"
        print
        Exit()

    # No MySQL sources at this moment. So skip next 2 lines
    # mysql_sources = ["test_MySqlProvider.cpp",]
    # sources.extend(mysql_sources)

    env.Append(CPPDEFINES='RCDB_MYSQL')
    env.ParseConfig('mysql_config --libs --cflags')
    env.ParseFlags('mysql_config --include')
else:
    print "CCDB is being build WITHOUT MySQL support. Use 'with-mysql=true' flag to explicitly enable MySQL support"


# Making dynamic library
rcdb_shared_lib = env.SharedLibrary(target='rcdb',  source = sources)
rcdb_shared_lib_install = env.Install('#lib', rcdb_shared_lib)

# Making static library
rcdb_static_lib = env.StaticLibrary(target='rcdb',  source = sources)
rcdb_static_lib_install = env.Install('#lib', rcdb_static_lib)

# Export all
Export('rcdb_shared_lib')
Export('rcdb_static_lib')
